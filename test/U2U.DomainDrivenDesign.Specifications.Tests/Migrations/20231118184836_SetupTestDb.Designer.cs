// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using U2U.DomainDrivenDesign.Specifications.Tests;

#nullable disable

namespace U2U.DomainDrivenDesign.Specifications.Tests.Migrations
{
    [DbContext(typeof(TrainingDb))]
    [Migration("20231118184836_SetupTestDb")]
    partial class SetupTestDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "UARCH",
                            Name = "Patterns and Practices"
                        },
                        new
                        {
                            Id = 2,
                            Code = "UWEBA",
                            Name = "Advanced Web Development"
                        },
                        new
                        {
                            Id = 3,
                            Code = "UCORE",
                            Name = "Upgrade to DotNet Core"
                        },
                        new
                        {
                            Id = 4,
                            Code = "UDEF",
                            Name = "Domain Driven Design With Entity Framework Core"
                        });
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Provider = "X",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Provider = "X",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Provider = "X",
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Session");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            EndDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            EndDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            EndDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            EndDate = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            EndDate = new DateTime(2020, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            EndDate = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 1,
                            EndDate = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 2,
                            EndDate = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 3,
                            EndDate = new DateTime(2020, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Joske",
                            LastName = "Vermeulen"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Eddy",
                            LastName = "Wally"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Sam",
                            LastName = "Goris"
                        });
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.StudentSession", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSession");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            SessionId = 1,
                            StudentId = 3
                        },
                        new
                        {
                            SessionId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            SessionId = 3,
                            StudentId = 1
                        },
                        new
                        {
                            SessionId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            SessionId = 3,
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Login", b =>
                {
                    b.HasOne("U2U.DomainDrivenDesign.Specifications.Tests.Student", "Student")
                        .WithOne("Login")
                        .HasForeignKey("U2U.DomainDrivenDesign.Specifications.Tests.Login", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Session", b =>
                {
                    b.HasOne("U2U.DomainDrivenDesign.Specifications.Tests.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.StudentSession", b =>
                {
                    b.HasOne("U2U.DomainDrivenDesign.Specifications.Tests.Session", "Session")
                        .WithMany("Students")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U2U.DomainDrivenDesign.Specifications.Tests.Student", "Student")
                        .WithMany("Sessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Course", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Session", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("U2U.DomainDrivenDesign.Specifications.Tests.Student", b =>
                {
                    b.Navigation("Login")
                        .IsRequired();

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
